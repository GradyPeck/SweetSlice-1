{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/checkout/checkout.component.ts","webpack:///src/app/checkout/checkout.component.html","webpack:///src/app/classes.ts","webpack:///src/app/ingredient/ingredient.component.ts","webpack:///src/app/ingredient/ingredient.component.html","webpack:///src/app/my-cart.service.ts","webpack:///src/app/my-server.service.ts","webpack:///src/app/pizza-maker/pizza-maker.component.ts","webpack:///src/app/pizza-maker/pizza-maker.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","CheckoutComponent","service","Ingredient","baseIngredient","isSelected","name","type","cost","selected","Pizza","toppings","frosting","crust","newIngredient","toLowerCase","push","IngredientComponent","MyCartService","cart","myCrust","myFrosting","myToppings","console","log","providedIn","myServer","http","myPath","get","responseType","typeName","property","PizzaMakerComponent","server","_toppings","_frostings","_crusts","_types","getAllTypes","subscribe","data","getAllOfType","iIngredient","toppingInterfaces","filter","i","ingredient","convertToInterface","addPizza","selectedCrust","selectedFrosting","chosenFrosting","chosenCrust","addToCart","environment","production","bootstrapModule","catch","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PizzaMakerComponent } from './pizza-maker/pizza-maker.component';\nimport { CheckoutComponent } from './checkout/checkout.component';\n\n\nconst routes: Routes = [\n  // {\n  //   path: '**',\n  //   component: AppComponent\n  // },\n  {\n    path: 'pizzamaker',\n    component: PizzaMakerComponent\n  },\n  {\n    path: 'checkout',\n    component: CheckoutComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'sweet-slice';\n}\n","<a [routerLink]=\"['**']\" routerLinkActive=\"router-link-active\"><h1>Sweet Slice</h1></a>\n<a [routerLink]=\"['/pizzamaker']\" routerLinkActive=\"router-link-active\">Make a Pizza</a>\n<a [routerLink]=\"['/checkout']\" routerLinkActive=\"router-link-active\"><button>Go To Checkout</button></a>\n\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { IngredientComponent } from './ingredient/ingredient.component';\nimport { PizzaMakerComponent } from './pizza-maker/pizza-maker.component';\nimport { CheckoutComponent } from './checkout/checkout.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    IngredientComponent,\n    PizzaMakerComponent,\n    CheckoutComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { IPizza } from '../interfaces'\nimport { MyCartService } from '../my-cart.service';\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.css']\n})\nexport class CheckoutComponent implements OnInit {\n  cart : IPizza[];\n\n  constructor(public service : MyCartService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1>Checkout</h1>\n\n<div class=\"pizza-container\">\n    <div>\n        <h2>Your Order</h2>\n        <p>Total</p>\n    </div>\n    <div>\n        <p>Crust:</p>\n        <p>Frosting:</p>\n        <p>Toppings:</p>\n    </div>\n</div>\n\n<div class=\"order-total\">\n    <p>Subtotal:</p>\n    <p>Tax:</p>\n    <p>Tip:</p>\n<h2>Order Total:</h2>\n</div>","import { IPizza, IIngredient } from \"./interfaces\";\n\nexport class Ingredient implements IIngredient {\n    id: string = '';\n    name: string = '';\n    type: string = '';\n    cost: number = -1;\n    selected?: boolean = false;\n\n    constructor(baseIngredient?: IIngredient, isSelected: boolean = false) {\n        this.id = baseIngredient.id;\n        this.name = baseIngredient.name;\n        this.type = baseIngredient.type;\n        this.cost = baseIngredient.cost;\n        this.selected = isSelected;\n    }\n\n    convertToInterface(): IIngredient {\n        return {\n            id: this.id,\n            name: this.name,\n            type: this.type,\n            cost: this.cost\n        }\n    }\n}\n\nexport class Pizza implements IPizza {\n    toppings: IIngredient[] = [];\n    frosting: IIngredient = new Ingredient();\n    crust: IIngredient = new Ingredient();\n\n    constructor() {\n    }\n\n    addToPizza(newIngredient: IIngredient) {\n        switch (newIngredient.type.toLowerCase()) {\n            case 'topping':\n                this.toppings.push(newIngredient);\n                break;\n            case 'frosting':\n                this.frosting = newIngredient;\n                break;\n            case 'crust':\n                this.crust = newIngredient;\n                break;\n        }\n    }\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { IIngredient } from '../interfaces';\n\n@Component({\n  selector: 'app-ingredient',\n  templateUrl: './ingredient.component.html',\n  styleUrls: ['./ingredient.component.css']\n})\nexport class IngredientComponent implements OnInit {\n  @Input() ingredient : IIngredient; \n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>ingredient works!</p>\n<div class=\"ingredient\">\n    <p>Name</p>\n    <p>Type</p>\n    <p>Price</p>\n</div>\n\n<button>Select</button>","import { Injectable } from '@angular/core';\nimport { IPizza, IIngredient } from './interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class MyCartService {\n\n  constructor() { }\n\n  cart: IPizza[] = [];\n\n  //creates a new pizza and adds it to the cart. Takes ingredients in the order crust, frosting, topping, topping, etc. \n  addPizza(myCrust: IIngredient, myFrosting: IIngredient, myToppings: IIngredient[]) {\n    this.cart.push(\n      {\n        crust: myCrust,\n        frosting: myFrosting,\n        toppings: myToppings\n      });\n    console.log('Current cart: ', this.cart);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class myServer {\n\n  constructor(private http: HttpClient) { }\n\n  myPath = 'http://localhost:3000/ingredients';\n\n  //returns an array of all defined ingredients as objects. \n  getAllIngredients() {\n    \n    return this.http.get(`${this.myPath}/all`, { responseType: \"json\" });\n    // Code for attempting to return an array\n      // let ingredients = [];\n      // ).subscribe(\n      //   (data: any) => {\n      //     console.log(data);\n      //     ingredients = data;\n      //   },\n      //   err => console.log('Error: ', err),\n      //   () => { return ingredients; });\n  }\n\n  //returns an array of all IDs currently in use. \n  getAllIDs() {\n    return this.http\n      .get(`${this.myPath}/ids`,\n        { responseType: \"json\" }\n      );\n  }\n\n  //returns an array of all types currently in use. \n  getAllTypes() {\n    return this.http\n      .get(`${this.myPath}/types/all`,\n        { responseType: \"json\" }\n      );\n  }\n\n  //returns an array of all names currently in use.\n  getAllNames() {\n    return this.http\n      .get(`${this.myPath}/names/all`,\n        { responseType: \"json\" }\n      );\n  }\n\n  //returns an array of all ingredients with the given type, as objects.\n  getAllOfType(typeName: string) {\n    return this.http\n      .get(`${this.myPath}/types/${typeName}/all`,\n        { responseType: \"json\" }\n      );\n  }\n\n  //returns the selected property (\"name\", \"type\", or \"cost\") of the ingredient with the ID provided\n  getIngredientProperty(id: string, property: string) {\n    return this.http\n      .get(`${this.myPath}/${id}/${property}`,\n        { responseType: \"json\" }\n      );\n  }\n\n  //returns all the costs. \n  getCosts() {\n    return this.http\n      .get(`${this.myPath}/costs/all`,\n        { responseType: \"json\" }\n      );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { myServer } from '../my-server.service';\nimport { IIngredient, IPizza } from '../interfaces';\nimport { Ingredient, Pizza } from '../classes';\nimport { MyCartService } from '../my-cart.service';\n\n@Component({\n  selector: 'app-pizza-maker',\n  templateUrl: './pizza-maker.component.html',\n  styleUrls: ['./pizza-maker.component.css']\n})\nexport class PizzaMakerComponent implements OnInit {\n  _toppings: Ingredient[] = [];\n  _frostings: Ingredient[] = [];\n  _crusts: Ingredient[] = [];\n  _types: string[] = [];\n\n  selectedFrosting: Ingredient;\n  selectedCrust: Ingredient;\n\n  constructor(private server: myServer, private cart: MyCartService) {\n    // Getting all the different type names\n    this.server.getAllTypes().subscribe((data: string[]) => this._types = data);\n    // Getting ingredients by each type so filtering isn't needed later\n    this.server.getAllOfType('topping').subscribe((data: IIngredient[]) => {\n      for (const iIngredient of data) {\n        this._toppings.push(new Ingredient(iIngredient));\n      }\n    });\n    this.server.getAllOfType('frosting').subscribe(\n      (data: IIngredient[]) => {\n        for (const iIngredient of data) {\n          this._frostings.push(new Ingredient(iIngredient));\n        }\n      });\n    this.server.getAllOfType('crust').subscribe(\n      (data: IIngredient[]) => {\n        for (const iIngredient of data) {\n          this._crusts.push(new Ingredient(iIngredient));\n        }\n      });\n  }\n\n  ngOnInit(): void { }\n\n  addToCart() {\n    // Converting toppings into interfaces\n    let toppingInterfaces: IIngredient[] = [];\n    for (const ingredient of this._toppings.filter(i => i.selected)) {\n      toppingInterfaces.push(ingredient.convertToInterface());\n    }\n    // Adding pizza to cart\n    this.cart.addPizza(this.selectedCrust.convertToInterface(),\n                        this.selectedFrosting.convertToInterface(),\n                        toppingInterfaces);\n  }\n\n  chooseFrosting(chosenFrosting: Ingredient) {\n    this.selectedFrosting = chosenFrosting;\n  }\n\n  chooseCrust(chosenCrust: Ingredient) {\n    this.selectedCrust = chosenCrust;\n  }\n}\n\n\n\n","<h1>Create Your Pizza</h1>\n<div class=\"pizza-form\">\n  <h1 class=\"type-name\">Toppings</h1>\n  <div class=\"topping\" *ngFor=\"let ingr of _toppings\">\n    <label>\n      <input type=\"checkbox\" [(ngModel)]=\"ingr.selected\">\n      {{ingr.name}}\n    </label>\n  </div>\n  <div class=\"type-wrapper\">\n    <h1 class=\"type-name\">Frosting</h1>\n    <div class=\"topping\" *ngFor=\"let ingr of _frostings; index as i\">\n      <label>\n        <input type=\"radio\" name=\"frosting\" [checked]=\"i === 0\" (change)=\"chooseFrosting(ingr)\">\n        {{ingr.name}}\n      </label>\n    </div>\n  </div>\n  <div class=\"type-wrapper\">\n    <h1 class=\"type-name\">Crust</h1>\n    <div class=\"topping\" *ngFor=\"let ingr of _crusts; index as i\">\n      <label>\n        <input type=\"radio\" name=\"crust\" [checked]=\"i === 0\" (change)=\"chooseCrust(ingr)\">\n        {{ingr.name}}\n      </label>\n    </div>\n  </div>\n  <button (click)=\"addToCart()\">Add to Cart</button>\n</div>\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}